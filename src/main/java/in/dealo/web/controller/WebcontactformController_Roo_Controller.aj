// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package in.dealo.web.controller;

import in.dealo.entity.Webcontactform;
import in.dealo.svc.WebcontactformSvc;
import in.dealo.web.controller.WebcontactformController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect WebcontactformController_Roo_Controller {
    
    @Autowired
    WebcontactformSvc WebcontactformController.webcontactformSvc;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String WebcontactformController.create(@Valid Webcontactform webcontactform, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, webcontactform);
            return "su/webcontactforms/create";
        }
        uiModel.asMap().clear();
        webcontactformSvc.saveWebcontactform(webcontactform);
        return "redirect:/su/webcontactforms/" + encodeUrlPathSegment(webcontactform.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String WebcontactformController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Webcontactform());
        return "su/webcontactforms/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String WebcontactformController.show(@PathVariable("id") Integer id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("webcontactform", webcontactformSvc.findWebcontactform(id));
        uiModel.addAttribute("itemId", id);
        return "su/webcontactforms/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String WebcontactformController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("webcontactforms", webcontactformSvc.findWebcontactformEntries(firstResult, sizeNo));
            float nrOfPages = (float) webcontactformSvc.countAllWebcontactforms() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("webcontactforms", webcontactformSvc.findAllWebcontactforms());
        }
        addDateTimeFormatPatterns(uiModel);
        return "su/webcontactforms/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String WebcontactformController.update(@Valid Webcontactform webcontactform, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, webcontactform);
            return "su/webcontactforms/update";
        }
        uiModel.asMap().clear();
        webcontactformSvc.updateWebcontactform(webcontactform);
        return "redirect:/su/webcontactforms/" + encodeUrlPathSegment(webcontactform.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String WebcontactformController.updateForm(@PathVariable("id") Integer id, Model uiModel) {
        populateEditForm(uiModel, webcontactformSvc.findWebcontactform(id));
        return "su/webcontactforms/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String WebcontactformController.delete(@PathVariable("id") Integer id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Webcontactform webcontactform = webcontactformSvc.findWebcontactform(id);
        webcontactformSvc.deleteWebcontactform(webcontactform);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/su/webcontactforms";
    }
    
    void WebcontactformController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("webcontactform_created_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("webcontactform_modified_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void WebcontactformController.populateEditForm(Model uiModel, Webcontactform webcontactform) {
        uiModel.addAttribute("webcontactform", webcontactform);
        addDateTimeFormatPatterns(uiModel);
    }
    
    String WebcontactformController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
