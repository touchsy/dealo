// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package in.dealo.web.controller;

import in.dealo.entity.DealCategory;
import in.dealo.svc.DealCategorySvc;
import in.dealo.svc.DealSvc;
import in.dealo.web.controller.DealCategoryController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect DealCategoryController_Roo_Controller {
    
    @Autowired
    DealCategorySvc DealCategoryController.dealCategorySvc;
    
    @Autowired
    DealSvc DealCategoryController.dealSvc;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String DealCategoryController.create(@Valid DealCategory dealCategory, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, dealCategory);
            return "su/dealcategorys/create";
        }
        uiModel.asMap().clear();
        dealCategorySvc.saveDealCategory(dealCategory);
        return "redirect:/su/dealcategorys/" + encodeUrlPathSegment(dealCategory.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String DealCategoryController.createForm(Model uiModel) {
        populateEditForm(uiModel, new DealCategory());
        return "su/dealcategorys/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String DealCategoryController.show(@PathVariable("id") Integer id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("dealcategory", dealCategorySvc.findDealCategory(id));
        uiModel.addAttribute("itemId", id);
        return "su/dealcategorys/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String DealCategoryController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("dealcategorys", dealCategorySvc.findDealCategoryEntries(firstResult, sizeNo));
            float nrOfPages = (float) dealCategorySvc.countAllDealCategorys() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("dealcategorys", dealCategorySvc.findAllDealCategorys());
        }
        addDateTimeFormatPatterns(uiModel);
        return "su/dealcategorys/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String DealCategoryController.update(@Valid DealCategory dealCategory, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, dealCategory);
            return "su/dealcategorys/update";
        }
        uiModel.asMap().clear();
        dealCategorySvc.updateDealCategory(dealCategory);
        return "redirect:/su/dealcategorys/" + encodeUrlPathSegment(dealCategory.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String DealCategoryController.updateForm(@PathVariable("id") Integer id, Model uiModel) {
        populateEditForm(uiModel, dealCategorySvc.findDealCategory(id));
        return "su/dealcategorys/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String DealCategoryController.delete(@PathVariable("id") Integer id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        DealCategory dealCategory = dealCategorySvc.findDealCategory(id);
        dealCategorySvc.deleteDealCategory(dealCategory);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/su/dealcategorys";
    }
    
    void DealCategoryController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("dealCategory_created_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("dealCategory_modified_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void DealCategoryController.populateEditForm(Model uiModel, DealCategory dealCategory) {
        uiModel.addAttribute("dealCategory", dealCategory);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("deals", dealSvc.findAllDeals());
    }
    
    String DealCategoryController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
