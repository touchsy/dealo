// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package in.dealo.web.controller;

import in.dealo.entity.Usr;
import in.dealo.svc.DealOrderHistorySvc;
import in.dealo.svc.DealOrderSvc;
import in.dealo.svc.UsrSvc;
import in.dealo.svc.VendorSvc;
import in.dealo.web.controller.UsrController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect UsrController_Roo_Controller {
    
    @Autowired
    UsrSvc UsrController.usrSvc;
    
    @Autowired
    DealOrderSvc UsrController.dealOrderSvc;
    
    @Autowired
    DealOrderHistorySvc UsrController.dealOrderHistorySvc;
    
    @Autowired
    VendorSvc UsrController.vendorSvc;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String UsrController.create(@Valid Usr usr, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, usr);
            return "su/usrs/create";
        }
        uiModel.asMap().clear();
        usrSvc.saveUsr(usr);
        return "redirect:/su/usrs/" + encodeUrlPathSegment(usr.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String UsrController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Usr());
        return "su/usrs/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String UsrController.show(@PathVariable("id") Integer id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("usr", usrSvc.findUsr(id));
        uiModel.addAttribute("itemId", id);
        return "su/usrs/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String UsrController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("usrs", usrSvc.findUsrEntries(firstResult, sizeNo));
            float nrOfPages = (float) usrSvc.countAllUsrs() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("usrs", usrSvc.findAllUsrs());
        }
        addDateTimeFormatPatterns(uiModel);
        return "su/usrs/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String UsrController.update(@Valid Usr usr, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, usr);
            return "su/usrs/update";
        }
        uiModel.asMap().clear();
        usrSvc.updateUsr(usr);
        return "redirect:/su/usrs/" + encodeUrlPathSegment(usr.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String UsrController.updateForm(@PathVariable("id") Integer id, Model uiModel) {
        populateEditForm(uiModel, usrSvc.findUsr(id));
        return "su/usrs/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String UsrController.delete(@PathVariable("id") Integer id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Usr usr = usrSvc.findUsr(id);
        usrSvc.deleteUsr(usr);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/su/usrs";
    }
    
    void UsrController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("usr_created_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("usr_modified_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void UsrController.populateEditForm(Model uiModel, Usr usr) {
        uiModel.addAttribute("usr", usr);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("dealorders", dealOrderSvc.findAllDealOrders());
        uiModel.addAttribute("dealorderhistorys", dealOrderHistorySvc.findAllDealOrderHistorys());
        uiModel.addAttribute("vendors", vendorSvc.findAllVendors());
    }
    
    String UsrController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
