// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package in.dealo.web.controller;

import in.dealo.entity.Coupon;
import in.dealo.svc.CouponSvc;
import in.dealo.svc.DealOrderSvc;
import in.dealo.web.controller.CouponController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect CouponController_Roo_Controller {
    
    @Autowired
    CouponSvc CouponController.couponSvc;
    
    @Autowired
    DealOrderSvc CouponController.dealOrderSvc;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String CouponController.create(@Valid Coupon coupon, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, coupon);
            return "su/coupons/create";
        }
        uiModel.asMap().clear();
        couponSvc.saveCoupon(coupon);
        return "redirect:/su/coupons/" + encodeUrlPathSegment(coupon.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String CouponController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Coupon());
        return "su/coupons/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String CouponController.show(@PathVariable("id") Integer id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("coupon", couponSvc.findCoupon(id));
        uiModel.addAttribute("itemId", id);
        return "su/coupons/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String CouponController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("coupons", couponSvc.findCouponEntries(firstResult, sizeNo));
            float nrOfPages = (float) couponSvc.countAllCoupons() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("coupons", couponSvc.findAllCoupons());
        }
        addDateTimeFormatPatterns(uiModel);
        return "su/coupons/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String CouponController.update(@Valid Coupon coupon, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, coupon);
            return "su/coupons/update";
        }
        uiModel.asMap().clear();
        couponSvc.updateCoupon(coupon);
        return "redirect:/su/coupons/" + encodeUrlPathSegment(coupon.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String CouponController.updateForm(@PathVariable("id") Integer id, Model uiModel) {
        populateEditForm(uiModel, couponSvc.findCoupon(id));
        return "su/coupons/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String CouponController.delete(@PathVariable("id") Integer id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Coupon coupon = couponSvc.findCoupon(id);
        couponSvc.deleteCoupon(coupon);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/su/coupons";
    }
    
    void CouponController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("coupon_created_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("coupon_modified_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void CouponController.populateEditForm(Model uiModel, Coupon coupon) {
        uiModel.addAttribute("coupon", coupon);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("dealorders", dealOrderSvc.findAllDealOrders());
    }
    
    String CouponController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
