// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package in.dealo.entity;

import in.dealo.entity.DealOrderHistory;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DealOrderHistory_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager DealOrderHistory.entityManager;
    
    public static final EntityManager DealOrderHistory.entityManager() {
        EntityManager em = new DealOrderHistory().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long DealOrderHistory.countDealOrderHistorys() {
        return entityManager().createQuery("SELECT COUNT(o) FROM DealOrderHistory o", Long.class).getSingleResult();
    }
    
    public static List<DealOrderHistory> DealOrderHistory.findAllDealOrderHistorys() {
        return entityManager().createQuery("SELECT o FROM DealOrderHistory o", DealOrderHistory.class).getResultList();
    }
    
    public static DealOrderHistory DealOrderHistory.findDealOrderHistory(Integer id) {
        if (id == null) return null;
        return entityManager().find(DealOrderHistory.class, id);
    }
    
    public static List<DealOrderHistory> DealOrderHistory.findDealOrderHistoryEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM DealOrderHistory o", DealOrderHistory.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void DealOrderHistory.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void DealOrderHistory.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            DealOrderHistory attached = DealOrderHistory.findDealOrderHistory(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void DealOrderHistory.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void DealOrderHistory.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public DealOrderHistory DealOrderHistory.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        DealOrderHistory merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
